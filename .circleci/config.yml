version: 2.1
orbs:
  slack: circleci/slack@4.1
  node: circleci/node@5.1.0

parameters:
  workflow_id:
    type: string
    default: '${CIRCLE_WORKFLOW_ID:0:7}'

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        # default: ${CIRCLE_WORKFLOW_ID}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack \
            --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
        # default: ${CIRCLE_WORKFLOW_ID}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            apk add --update --no-cache curl
            export SUCCESS=$(curl --insecure https://kvdb.io/BDEAKJSkNeSRkXKTviyNYR/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if [ "$SUCCESS" -eq 1 ]; then
              echo "------start revert------"
              cd ~/project/backend
              npm install
              npm run build
              npm run migrations:revert
            else
              echo "------don't revert------"
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ frontend-test ]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [ frontend/node_modules ]
          key: frontend-test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-test ]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [ backend/node_modules ]
          key: backend-test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ frontend-scan ]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force            
            npm audit --audit-level=critical
      - save_cache:
          paths: [ frontend/node_modules ]
          key: frontend-scan

  scan-backend:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - node/install:
          install-yarn: true
          node-version: '13.8.0'
      - run: node --version
      - restore_cache:
          keys: [ backend-scan ]
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force 
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: lampqt-circleci
      - save_cache:
          paths: [ backend/node_modules ]
          key: backend-scan

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides "ID=${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo $(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text) >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure

  configure-infrastructure:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - '0f:b0:94:39:d5:6d:3f:12:08:db:87:ff:73:50:b9:e0'
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip ansible aws-cli curl
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Configure server
          command: |
            # add environment variables to server
            echo ENVIRONMENT=production > backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            cat backend/.env
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations >> migrations.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "success" ~/project/backend/migrations.txt
            then
              curl --insecure https://kvdb.io/BDEAKJSkNeSRkXKTviyNYR/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
            pwd; ls -la;
            cat ~/project/backend/migrations.txt
            SUCCESS=$(curl --insecure  https://kvdb.io/BDEAKJSkNeSRkXKTviyNYR/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  deploy-backend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - '0f:b0:94:39:d5:6d:3f:12:08:db:87:ff:73:50:b9:e0'
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli ansible
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend
          command: |
            ls -la ~
            pwd; ls -la;
            cd backend
            npm install
            npm run build
            cd ..
            pwd; ls -la;
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is ------$(cat inventory.txt)"
            ls -la ~
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  smoke-test:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache curl aws-cli nodejs npm curl
      - run:
          name: Backend smoke test
          command: |
            sleep 60 && pwd
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo $API_URL
            if curl "${API_URL}/api/status" | grep "ok"; then return 0; else return 1; fi
      - run:
          name: Frontend smoke test.
          command: |
            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo $URL
            if curl -s ${URL} | grep "Welcome"; then return 0; else return 1; fi
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  cloudfront-update:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache curl aws-cli nodejs npm curl
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text | grep -o '[^-]*$' )
            echo $OldWorkflowID >> ~/project/OldWorkflowID.txt
            cat ~/project/OldWorkflowID.txt
            
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name "InitialStack" \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
            
            echo OldWorkflowID: $(cat ~/project/OldWorkflowID.txt)
            echo CurrentWorflowID: "${CIRCLE_WORKFLOW_ID:0:7}"

      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id and remove stacks
          command: |
            export STACKS=$(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            echo Stack names: "${STACKS[@]}"    
            export currentWorkflowId=54e76a1
            oldWorkflowIds=()
            stack_list=($(echo "$STACKS" | awk '{for(i=1;i<=NF;i++)print $i}'))
            echo "stack_list: ${stack_list[@]}"
            for stack in "${stack_list[@]}"; do
              numeric_portion="${stack##*-}"
              if [[ "$numeric_portion" != "$currentWorkflowId" ]]; then
                oldWorkflowIds+=("$numeric_portion")
                echo "----stack ${stack}"
                echo "----numeric_portion ${numeric_portion}"
                echo "----oldWorkflowIds ${oldWorkflowIds}"
              fi
            done
            echo oldWorkflowIds: "${oldWorkflowIds}"
            
            for oldWorkflowID in "${oldWorkflowIDs[@]}"; do
              echo "-------------------- Delete confirm ${oldWorkflowID} -----------------------"
              aws s3 rm "s3://udapeople-${oldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${oldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${oldWorkflowID}"
            done

  add-prometheus-node-exporter:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - '0f:b0:94:39:d5:6d:3f:12:08:db:87:ff:73:50:b9:e0'
      - run:
          name: Install dependencies
          command: |
            apk add --update aws-cli tar gzip ansible nodejs npm
      - attach_workspace:
          at: ~/
      - run:
          name: Setup Prometheus Node Exporter
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt node-exporter.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
workflows:
  default:
    jobs:
#      - build-frontend
#      - build-backend
#      - test-frontend:
#          requires: [build-frontend]
#      - test-backend:
#          requires: [build-backend]
#      - scan-backend:
#          requires: [build-backend]
#      - scan-frontend:
#          requires: [build-frontend]
#      - deploy-infrastructure:
#          filters:
#            branches:
#              only: [master]
#      - add-prometheus-node-exporter:
#          requires: [deploy-infrastructure]
#      - configure-infrastructure:
#          requires: [add-prometheus-node-exporter]
#      - run-migrations:
#          requires: [configure-infrastructure]
#      - deploy-frontend:
#          requires: [run-migrations]
#      - deploy-backend:
#          requires: [run-migrations]
#      - smoke-test:
#          requires: [deploy-backend, deploy-frontend]
#      - cloudfront-update:
#          requires: [smoke-test]
      - cleanup
#          requires: [cloudfront-update, add-prometheus-node-exporter]